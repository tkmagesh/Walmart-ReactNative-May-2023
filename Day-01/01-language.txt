Data Types
    - string
    - number
    - boolean
    - undefined
    - object (dictionary)
    - function

Constructs
    - var
    - if else
    - switch case
    - while
    - for
    - for in
    - throw 
    - try catch finally
    - function

APIs
    - Array
    - Math
    - Error
    - RegEx
    - Date
    - Timer
        * setTimeout
        * clearTimeout
        * setInterval
        * clearInterval

- Categories
    - Line Oriented
    - Procedural (C & COBOL)
    - Object Oriented (C++, Java)
    - Object Based (Visual Basic) (JS)
    - Functional Languages (Haskell, F#, Scala) (JS)
        Functions are data (objects)
            * functions can be created like objects
            * functions can have attributes (state) like objects
            * functions can have methods (behavior) like objects
            * functions can be passed as arguments to other functions like objects (HOF)
            * functions can be returned as return values from other functions like objects (HOF)

    - Dynamic
    - Loosely typed 

Implicit values available in a function
    - this (Invocation Context)
        
    - arguments
        * array LIKE object with all the argument values passed to the function
        - arguments.length
        - arguments[0]

In JS,
    IT DOESNOT matter WHERE a function is OR who OWNS the function
        what matters is HOW the function is INVOKED
    There are 6 different ways of invoking a function in JS

When a function is invoked
    As a method of an object (obj)
        this => obj
    
    As a function
        this => global scope (window in the browser)

    Using the 'call' method of the function

    Using the 'apply' method of the function

    As an "Immediately Invoked Function Expression"

    
ES5


ES6 & above
    - BigInt
    - Symbol

$(domNode)
$([domNode1, domNode2])
$(string)
$(function(){})

add(10,20)  //=> 30
add(10, "20") //=> 30
add(10, "abc") //=> 10
add(10) //=> 10
add() //=> 0
add(10,20,30,40,50) //=> 150
add([10,20],[30,40,50]) //=> 150
add([10,20],[30,40,"50"]) //=> 150
add([10,20],[30,[40,"50"]]) //=> 150
add(function(){return 10;}, function(){return 20}) //=> 30
add(function(){ return [10,20];}, function() { return[30,[40,"50"]]; }) //=> 150
add([function(){ return [10,20];}, function() { return[30,[40,"50"]]; }]) //=> 150


Closures
    Private state
    
Async Programming